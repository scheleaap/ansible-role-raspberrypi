---
# tasks file for raspberrypi

- name: "Ensure that the external sound card is used"
  template:
    src: templates/asoundrc.j2
    dest: "{{ ansible_env.HOME }}/.asoundrc"
    mode: 0644


# Source: https://learn.adafruit.com/read-only-raspberry-pi/

# Remove unwanted packages and replace log management with busybox (use logread if needed)

- name: "Ensure certain packages are not installed"
  become: true
  apt:
    name: "{{ item }}"
    state: absent
    purge: yes
  with_items:
    - triggerhappy
    - cron
    - logrotate
    - dphys-swapfile
    - xserver-common
    - lightdm
    - fake-hwclock
    - rsyslog

- name: "Ensure certain packages are installed"
  become: true
  apt:
    name: "{{ item }}"
    state: present
    purge: yes
  with_items:
    - openssh-server  # Added for testing. Should be installed by default.
    - busybox-syslogd


# Move directories to temporary directories

- name: "Ensure temporary directories exist"
  become: true
  file:
    path: "{{ item.path }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    state: directory
  with_items:
    - { path: /tmp/var/cache/mopidy, owner: mopidy, group: audio }
    - { path: /tmp/var/lib/mopidy, owner: mopidy, group: audio }
    - { path: /tmp/var/lib/snapserver, owner: snapserver, group: snapserver }
    - { path: /tmp/var/spool, owner: root, group: root }
- name: "Ensure temporary directories are mounted as tmpfs"
  become: true
  lineinfile:
    path: /etc/fstab
    line: "tmpfs {{ item }} tmpfs nodev,nosuid 0 0"
  with_items:
    - /tmp/var/cache/mopidy
    - /tmp/var/lib/mopidy
    - /tmp/var/lib/snapserver
    - /tmp/var/spool
- name: "Retrieve status of directories to replace with temporary directories"
  stat:
    path: "{{ item }}"
  with_items:
    - /var/cache/mopidy
    - /var/lib/mopidy
    - /var/lib/snapserver
    - /var/spool
  register: stat_directories
- name: "Ensure the directories to replace with temporary directories do not exist"
  become: true
  file:
    path: "{{ item.item }}"
    state: absent
  when: item.stat.exists and item.stat.isdir
  with_items: "{{ stat_directories.results }}"
- name: "Ensure the directories to replace with temporary directories are symlinked"
  become: true
  file:
    dest: "{{ item.item }}"
    state: link
    src: "/tmp{{ item.item }}"
    force: true  # Added mainly for testing. Should be present if Mopidy is installed.
  with_items: "{{ stat_directories.results }}"


# Move dhcpd.resolv.conf to tmpfs

- name: "Ensure /tmp/etc exists"
  become: true
  file:
    path: /tmp/etc
    state: directory
- name: "Ensure /tmp/etc is mounted as tmpfs"
  become: true
  lineinfile:
    path: /etc/fstab
    line: "tmpfs /tmp/etc tmpfs nodev,nosuid 0 0"
- name: "Ensure /tmp/etc/resolv.conf exists"
  become: true
  file:
    path: /tmp/etc/resolv.conf
    state: touch
- name: "Retrieve status of /etc/resolv.conf"
  stat:
    path: /etc/resolv.conf
  register: etc_resolv_conf
- name: "Ensure /etc/resolv.conf is not a regular file"
  become: true
  file:
    path: /etc/resolv.conf
    state: absent
  when: etc_resolv_conf.stat.exists and etc_resolv_conf.stat.isreg
  ignore_errors: yes  # Added for testing. Changing /etc/resolv.conf does not work in Docker.
- name: "Ensure /etc/resolv.conf links to /tmp/etc/resolv.conf"
  become: true
  file:
    dest: /etc/resolv.conf
    state: link
    src: /tmp/etc/resolv.conf
  ignore_errors: yes  # Added for testing. Changing /etc/resolv.conf does not work in Docker


# Make SSH work

- name: "Ensure the SSH server does not use privilege separation"
  become: true
  replace:
    path: /etc/ssh/sshd_config
    regexp: '^.*UsePrivilegeSeparation.*$'
    replace: 'UsePrivilegeSeparation no'
    backup: yes


# Change spool permissions in var.conf (rondie/Margaret fix)

- name: "Ensure the right permissions are set for the temporary directory /var/spool"
  become: true
  replace:
    path: /usr/lib/tmpfiles.d/var.conf
    regexp: '^(d\s+/var/spool\s+)0755(.*)$'
    replace: '\g<1>1777\g<2>'
    backup: yes


# Make edits to fstab

- name: "Ensure / is mounted read-only"
  become: true
  replace:
    path: /etc/fstab
    # PARTUUID=2db898db-02  /               ext4    defaults,noatime  0       1
    regexp: '^(.*/\s+ext4\s+)defaults,noatime(\s+.*)$'
    replace: '\1defaults,noatime,ro\2'
    backup: yes
- name: "Ensure /boot is mounted read-only"
  become: true
  replace:
    path: /etc/fstab
    # PARTUUID=2db898db-01  /boot           vfat    defaults          0       2
    regexp: '^(.*/boot\s+vfat\s+)defaults(\s+.*)$'
    replace: '\1defaults,ro\2'
    backup: yes
- name: "Ensure temporary directories are mounted as tmpfs"
  become: true
  lineinfile:
    path: /etc/fstab
    line: "{{ item }}"
  with_items:
    - "tmpfs /var/log tmpfs nodev,nosuid 0 0"
    - "tmpfs /var/log/mopidy tmpfs nodev,nosuid 0 0"
    - "tmpfs /var/tmp tmpfs nodev,nosuid 0 0"
    - "tmpfs /tmp     tmpfs nodev,nosuid 0 0"


# Add fastboot, noswap and/or ro to end of /boot/cmdline.txt

- name: "Ensure that /boot/cmdline.txt exists"  # Added for testing. Should be present by default.
  become: true
  file:
    path: /boot/cmdline.txt
    state: touch
- name: "Ensure that the Raspberry Pi is started with 'fastboot'"
  become: true
  replace:
    path: /boot/cmdline.txt
    regexp: '^((?:.(?!fastboot))*)$'
    replace: '\1 fastboot'
    # backup: yes
    backup: no  # Because the filenames Ansible creates do not work on FAT32. See https://github.com/ansible/ansible/issues/10591.
- name: "Ensure that the Raspberry Pi is started with 'noswap'"
  become: true
  replace:
    path: /boot/cmdline.txt
    regexp: '^((?:.(?!noswap))*)$'
    replace: '\1 noswap'
    # backup: yes
    backup: no  # Because the filenames Ansible creates do not work on FAT32. See https://github.com/ansible/ansible/issues/10591.
- name: "Ensure that the Raspberry Pi is started with 'ro'"
  become: true
  replace:
    path: /boot/cmdline.txt
    regexp: '^((?!ro(?:\s|$))(?:.(?!ro(?:\s|$)))*)$'
    replace: '\1 ro'
    # backup: yes
    backup: no  # Because the filenames Ansible creates do not work on FAT32. See https://github.com/ansible/ansible/issues/10591.
